#include "stm32f10x.h"
#include "main.h"
#include "system.h"

	void MPU6050_Write(uint8_t Reg, uint8_t Data);
	uint8_t MPU6050_Read(uint8_t Reg);
	void MPU6050_I2C_init(void);
	I2C1_ER_IRQHandler(void);
	I2C1_EV_IRQHandler(void);


	    uint16_t X, Y, Z;
	    uint16_t X1, Y1, Z1;



	    void I2C1_ER_IRQHandler(void)
	    {
	    	unsigned short temp_SR1 = I2C1->SR1;

	    	return;
	    } // скобочка I2C1_ER_IRQHandler




	    void I2C1_EV_IRQHandler(void)
	    {
	    	unsigned short temp_SR1 = I2C1->SR1;

	    	return;
	    } // скобочка I2C1_EV_IRQHandler


int main(void)
{




   volatile uint32_t i32;
   for(i32 = 0;  i32 < 100000; i32++) {}; // Программная задержка

   MPU6050_I2C_init(); // Настраиваем I2C
   for(i32 = 0;  i32 < 100000; i32++) {};

   //Датчик тактируется от встроенного 8Мгц осциллятора
   MPU6050_Write(0x6B, 0x00); // Register_PWR_M1 = 0, Disable sleep mode

 //Выполнить очистку встроенных регистров датчика
   MPU6050_Write(0x6A, 0x01); // Register_UsCtrl = 1
   for (i32 = 0;  i32 < 1000; i32++) {};




	//TODO loop
	for(;;)
	{

        X = MPU6050_Read(0x3B) << 8;
        X |= MPU6050_Read(0x3C);

        Y = MPU6050_Read(0x3D) << 8;
        Y |= MPU6050_Read(0x3E);

        Z = MPU6050_Read(0x3F) << 8;
        Z |= MPU6050_Read(0x40);



        X1 = MPU6050_Read(0x43) << 8;
        X1 |= MPU6050_Read(0x44);

        Y1 = MPU6050_Read(0x45) << 8;
        Y1 |= MPU6050_Read(0x46);

        Z1 = MPU6050_Read(0x47) << 8;
        Z1 |= MPU6050_Read(0x48);
        // Вывод переменны

	}// скобочка бесконечного цикла

}// скобочка мейна




void MPU6050_I2C_init(void)
{
  I2C_InitTypeDef I2C_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_OwnAddress1 = 0x13; // Собственный адрес
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = 100000; // 100 кГц
  I2C_Cmd(I2C1, ENABLE);
  I2C_Init(I2C1, &I2C_InitStructure);
}


//=============== Запись данных Data в регистр Reg по I2C ===============
void MPU6050_Write(uint8_t Reg, uint8_t Data)
{
  while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
  I2C_GenerateSTART(I2C1, ENABLE);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
  I2C_Send7bitAddress(I2C1, (0x68 << 1), I2C_Direction_Transmitter);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
  I2C_SendData(I2C1, Reg); // Передаём адрес регистра
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  I2C_SendData(I2C1, Data); // Передаём данные
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  I2C_GenerateSTOP(I2C1, ENABLE);
}


//=============== Чтение данных из регистра Reg по I2C ===============
uint8_t MPU6050_Read(uint8_t Reg)
{
  static uint8_t Data;
  while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
  I2C_GenerateSTART(I2C1, ENABLE);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
  I2C_Send7bitAddress(I2C1, (0x68 << 1), I2C_Direction_Transmitter);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
  I2C_Cmd(I2C1, ENABLE);
  I2C_SendData(I2C1, Reg); // Передаём адрес регистра
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  I2C_GenerateSTART(I2C1, ENABLE);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
  I2C_Send7bitAddress(I2C1, (0x68 << 1), I2C_Direction_Receiver);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
  I2C_AcknowledgeConfig(I2C1, DISABLE);
  I2C_GenerateSTOP(I2C1, ENABLE);
  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
  Data = I2C_ReceiveData(I2C1); // Принимаем данные
  I2C_AcknowledgeConfig(I2C1, ENABLE);
   return Data;
 }

